from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from loguru import logger

from database.connection import db
from database.models import CommunicationStyle, Gender, User
from handlers.keyboards import (
    get_back_keyboard,
    get_bot_gender_selection_keyboard,
    get_communication_style_keyboard,
    get_gender_selection_keyboard,
    get_settings_keyboard,
)

router = Router()


class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    waiting_for_gender = State()
    waiting_for_bot_gender = State()
    waiting_for_style = State()
    waiting_for_stop_words = State()


@router.callback_query(F.data == "settings_gender")
async def settings_gender(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:</b>",
        reply_markup=get_gender_selection_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(SettingsStates.waiting_for_gender)
    await callback.answer()


@router.callback_query(F.data == "settings_bot_gender")
async def settings_bot_gender(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∞ –±–æ—Ç–∞"""
    await callback.message.edit_text(
        "ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –±–æ—Ç–∞:</b>",
        reply_markup=get_bot_gender_selection_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(SettingsStates.waiting_for_bot_gender)
    await callback.answer()


@router.callback_query(F.data == "settings_style")
async def settings_style(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üí¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</b>",
        reply_markup=get_communication_style_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(SettingsStates.waiting_for_style)
    await callback.answer()


@router.callback_query(F.data == "settings_stop_words")
async def settings_stop_words(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user and user.stop_words:
        current_words = ", ".join(user.stop_words)
        text = f"üö´ <b>–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:</b>\n{current_words}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:"
    else:
        text = "üö´ <b>–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:"

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(SettingsStates.waiting_for_stop_words)
    await callback.answer()


@router.callback_query(F.data == "settings_consent")
async def settings_consent(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user and user.consent_given:
        text = "‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ —É–∂–µ –¥–∞–Ω–æ</b>\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    else:
        text = "‚ùå <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –Ω–µ –¥–∞–Ω–æ</b>\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ."

    await callback.message.edit_text(
        text, parse_mode="HTML", reply_markup=get_back_keyboard()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(SettingsStates.waiting_for_gender, F.data.startswith("gender_"))
async def change_gender(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    gender_value = callback.data.split("_")[1]
    gender = Gender(gender_value)

    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user:
        user.gender = gender
        await db.update_user(user)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {gender.value}</b>",
            reply_markup=get_back_keyboard(),
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard()
        )

    await state.clear()
    await callback.answer()


@router.callback_query(
    SettingsStates.waiting_for_bot_gender, F.data.startswith("bot_gender_")
)
async def change_bot_gender(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –±–æ—Ç–∞"""
    bot_gender_value = callback.data.split("_")[2]
    bot_gender = Gender(bot_gender_value)

    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user:
        user.bot_gender = bot_gender
        await db.update_user(user)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–ª –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {bot_gender.value}</b>",
            reply_markup=get_back_keyboard(),
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard()
        )

    await state.clear()
    await callback.answer()


@router.callback_query(SettingsStates.waiting_for_style, F.data.startswith("style_"))
async def change_style(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
    style_value = callback.data.split("_")[1]
    style = CommunicationStyle(style_value)

    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user:
        user.communication_style = style
        await db.update_user(user)

        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {style.value}</b>",
            reply_markup=get_back_keyboard(),
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard()
        )

    await state.clear()
    await callback.answer()


@router.message(SettingsStates.waiting_for_stop_words)
async def change_stop_words(message: Message, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    text = message.text.strip().lower()

    if text == "–Ω–µ—Ç":
        user.stop_words = []
        await db.update_user(user)
        await message.answer(
            "‚úÖ <b>–°—Ç–æ–ø-—Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã</b>",
            reply_markup=get_back_keyboard(),
            parse_mode="HTML",
        )
    else:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = [word.strip() for word in text.split(",") if word.strip()]
        user.stop_words = stop_words
        await db.update_user(user)

        words_text = ", ".join(stop_words)
        await message.answer(
            f"‚úÖ <b>–°—Ç–æ–ø-—Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:</b>\n{words_text}",
            reply_markup=get_back_keyboard(),
            parse_mode="HTML",
        )

    await state.clear()
