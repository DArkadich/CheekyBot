import re
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from loguru import logger

from database.connection import db
from database.models import CommunicationStyle, Conversation, Gender, User
from handlers.keyboards import (
    get_back_keyboard,
    get_bot_gender_selection_keyboard,
    get_communication_style_keyboard,
    get_consent_keyboard,
    get_gender_selection_keyboard,
    get_main_menu_keyboard,
    get_roleplay_scenarios_keyboard,
    get_settings_keyboard,
    get_stop_keyboard,
)
from services.context_manager import context_manager
from services.openai_service import openai_service

router = Router()


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM"""

    waiting_for_gender = State()
    waiting_for_bot_gender = State()
    waiting_for_style = State()
    waiting_for_stop_words = State()
    waiting_for_consent = State()
    in_conversation = State()


@router.message(Command("start"))  # type: ignore[misc]
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)

    if user is not None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            reply_markup=get_main_menu_keyboard(),
        )
        await state.clear()
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Ñ–ª–∏—Ä—Ç–∞ –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?",
            reply_markup=get_gender_selection_keyboard(),
        )
        await state.set_state(UserStates.waiting_for_gender)


@router.message(Command("help"))  # type: ignore[misc]
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>CheekyBot - –ë–æ—Ç –¥–ª—è —Ñ–ª–∏—Ä—Ç–∞ –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ 4 —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è: –∏–≥—Ä–∏–≤—ã–π, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π, –∑–∞–≥–∞–¥–æ—á–Ω—ã–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∞ –±–æ—Ç–∞ (–ú/–ñ/–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
‚Ä¢ –†–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–¥–∞ —É–≤–∞–∂–∞–µ–º –≤–∞—à–∏ –≥—Ä–∞–Ω–∏—Ü—ã
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+

<b>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>
    """
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("settings"))  # type: ignore[misc]
async def cmd_settings(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML",
    )


@router.message(Command("stats"))  # type: ignore[misc]
async def cmd_stats(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    stats = await db.get_user_stats(user_id)

    if stats is not None:
        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}
üî§ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.total_tokens}
‚ù§Ô∏è –õ—é–±–∏–º—ã–π —Å—Ç–∏–ª—å: {stats.favorite_style.value}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.last_activity.strftime('%d.%m.%Y %H:%M')}
        """
    else:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!"

    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ")  # type: ignore[misc]
async def start_conversation(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if user is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if not user.consent_given:
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+",
            reply_markup=get_consent_keyboard(),
        )
        await state.set_state(UserStates.waiting_for_consent)
        return

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ <b>{user.communication_style.value}</b> üòä\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!",
        reply_markup=get_stop_keyboard(),
        parse_mode="HTML",
    )
    await state.set_state(UserStates.in_conversation)


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")  # type: ignore[misc]
async def show_settings(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await cmd_settings(message)


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")  # type: ignore[misc]
async def show_stats(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await cmd_stats(message)


@router.message(F.text == "üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã")  # type: ignore[misc]
async def show_roleplay(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    await message.answer(
        "üé≠ <b>–†–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        reply_markup=get_roleplay_scenarios_keyboard(),
        parse_mode="HTML",
    )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")  # type: ignore[misc]
async def show_help(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await cmd_help(message)


def contains_profanity(text: str) -> bool:
    profanities = [
        "—Ö—É–π",
        "–±–ª—è–¥",
        "–ø–∏–∑–¥",
        "–µ–±–∞",
        "–Ω–∞—Ö—É–π",
        "—Å—É–∫–∞",
        "–Ω–∞–µ–±–Ω",
        "–º—É–¥–∏–ª",
        "–≥–∞–Ω–¥–æ–Ω",
    ]
    return any(re.search(rf"\b{word}", text, re.IGNORECASE) for word in profanities)


def detect_poetic_mood(text: str) -> tuple[bool, str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."""
    poetic_triggers = [
        (
            "alcohol",
            [
                "–Ω–∞–ª–µ–π",
                "–∫–æ–Ω—å—è–∫",
                "–≤–∏—Å–∫–∏",
                "–±–∞—Ä",
                "—Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫",
                "–±—É—Ö–∞—Ç—å",
                "–≤—ã–ø–∏—Ç—å",
                "—Ä—é–º–∫–∞",
                "–ø–µ—Ä–µ—Ç–µ—Ä–µ—Ç—å",
                "–∑–∞ –∂–∏–∑–Ω—å",
            ],
        ),
        (
            "boredom",
            [
                "—Å–∫—É—á–Ω–æ",
                "—Ä–∞–∑–≤–µ—Å–µ–ª–∏",
                "—Ä–∞–∑–≤–ª–µ–∫–∏",
                "–∏–≥—Ä–∞",
                "–∏–≥—Ä–∞—Ç—å",
                "—à—É—Ç–∫–∞",
                "–ø–æ—à—É—Ç–∏",
                "–∞–Ω–µ–∫–¥–æ—Ç",
            ],
        ),
        (
            "sad",
            [
                "–≥—Ä—É—Å—Ç—å",
                "—Ç–æ—Å–∫–∞",
                "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ",
                "–ø–µ—á–∞–ª—å",
                "—É—Å—Ç–∞–ª",
                "—É—Å—Ç–∞–ª–∞",
                "–≥—Ä—É—Å—Ç–Ω–æ",
                "–æ–¥–∏–Ω–æ–∫",
                "–æ–¥–∏–Ω–æ–∫–æ",
            ],
        ),
        (
            "poetry",
            [
                "—Å—Ç–∏—Ö",
                "—Ä–∏—Ñ–º–∞",
                "–ø–æ—ç–º–∞",
                "–≤ —Ä–∏—Ñ–º—É",
                "–ø–æ—ç—Ç–∏—á–µ—Å–∫–∏",
                "–ø–æ—ç–∑–∏—é",
                "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
            ],
        ),
    ]
    text_lower = text.lower()
    for mood, keywords in poetic_triggers:
        if any(word in text_lower for word in keywords):
            return True, mood
    return False, ""


@router.message(UserStates.in_conversation)  # type: ignore[misc]
async def handle_conversation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()
        return

    if isinstance(message, Message) and message.text is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        if user.stop_words:
            message_lower = message.text.lower()
            for word in user.stop_words:
                if word.lower() in message_lower:
                    await message.answer(
                        "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                    )
                    return

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        conversation_history = await context_manager.get_optimized_context(
            user_id, max_tokens=800
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        recent_history = await db.get_recent_conversations(user_id, limit=5)
        user_used_profanity = any(
            contains_profanity(conv.message) for conv in recent_history
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        poetic, mood = detect_poetic_mood(message.text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt —á–µ—Ä–µ–∑ openai_service
        bot_response = await openai_service.generate_response(
            message.text,
            user.communication_style,
            user.gender,
            user.bot_gender,
            conversation_history,
            user.stop_words,
            poetic=poetic,
            mood=mood,
        )

        if bot_response:
            await message.answer(bot_response)
            await context_manager.add_message_to_context(
                user_id, message.text, bot_response, user.communication_style.value
            )
            conversation = Conversation(
                id=0,
                user_id=user_id,
                message=message.text,
                bot_response=bot_response,
                communication_style=user.communication_style,
                tokens_used=len(message.text.split()) + len(bot_response.split()),
                created_at=datetime.now(),
            )
            await db.save_conversation(conversation)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("gender_"))  # type: ignore[misc]
async def handle_gender_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.message is None:
        return
    gender_value = callback.data.split("_")[1]
    gender = Gender(gender_value)

    await state.update_data(user_gender=gender)

    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª –±–æ—Ç–∞:",
        reply_markup=get_bot_gender_selection_keyboard(),
    )
    await state.set_state(UserStates.waiting_for_bot_gender)
    await callback.answer()


@router.callback_query(F.data.startswith("bot_gender_"))  # type: ignore[misc]
async def handle_bot_gender_selection(
    callback: CallbackQuery, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –±–æ—Ç–∞"""
    if callback.message is None:
        return
    bot_gender_value = callback.data.split("_")[2]
    bot_gender = Gender(bot_gender_value)

    await state.update_data(bot_gender=bot_gender)

    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_communication_style_keyboard(),
    )
    await state.set_state(UserStates.waiting_for_style)
    await callback.answer()


@router.callback_query(F.data.startswith("style_"))  # type: ignore[misc]
async def handle_style_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
    if callback.message is None:
        return
    style_value = callback.data.split("_")[1]
    style = CommunicationStyle(style_value)

    data = await state.get_data()
    user_gender = data.get("user_gender")
    bot_gender = data.get("bot_gender")

    if user_gender is None or bot_gender is None:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–æ—Ç–∞.")
        await callback.answer()
        return

    user_id = callback.from_user.id
    existing_user = await db.get_user(user_id)
    if existing_user is not None:
        await callback.message.edit_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_settings_keyboard(),
        )
        await state.clear()
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        user_id=user_id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        gender=user_gender,
        bot_gender=bot_gender,
        communication_style=style,
        consent_given=False,
        stop_words=[],
        created_at=datetime.now(),
        updated_at=datetime.now(),
    )

    await db.create_user(user)

    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
        f"–¢–≤–æ–π –ø–æ–ª: {user_gender.value}\n"
        f"–ü–æ–ª –±–æ—Ç–∞: {bot_gender.value}\n"
        f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {style.value}\n\n"
        f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+:",
        reply_markup=get_consent_keyboard(),
    )
    await state.set_state(UserStates.waiting_for_consent)
    await callback.answer()


@router.callback_query(F.data == "consent_yes")  # type: ignore[misc]
async def handle_consent_yes(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user:
        user.consent_given = True
        await db.update_user(user)

    await callback.message.edit_text(
        "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!",
        reply_markup=get_back_keyboard(),
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "consent_no")  # type: ignore[misc]
async def handle_consent_no(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 18+"""
    await callback.message.edit_text(
        "‚ùå –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=get_back_keyboard(),
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "back_to_main")  # type: ignore[misc]
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_back_keyboard())
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "stop_conversation")  # type: ignore[misc]
async def handle_stop_conversation(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üõë –û–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ' –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
        reply_markup=get_back_keyboard(),
    )
    await state.clear()
    await callback.answer()


@router.message(Command("clear_context"))  # type: ignore[misc]
async def cmd_clear_context(message: Message) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id

    await context_manager.clear_context(user_id)

    await message.answer(
        "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ."
    )


@router.message(Command("context_info"))  # type: ignore[misc]
async def cmd_context_info(message: Message) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    user_id = message.from_user.id

    context = await context_manager.get_context(user_id)
    preferences = await context_manager.get_user_preferences(user_id)

    context_info = f"""
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ</b>

üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {len(context) // 2}
üé≠ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å: {preferences['communication_style']}
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {preferences['mood']}
üìù –¢–µ–º—ã: {', '.join(preferences['topics']) if preferences['topics'] else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}

<i>–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</i>
    """

    await message.answer(context_info, parse_mode="HTML")


@router.message(Command("persona"))  # type: ignore[misc]
async def cmd_persona(message: Message, state: FSMContext) -> None:
    """–°–º–µ–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (default/poet)"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    if user is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å: /persona poet –∏–ª–∏ /persona default")
        return
    persona = args[1].strip().lower()
    if persona not in ("default", "poet"):
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏: default, poet")
        return
    user.persona = persona
    await db.update_user(user)
    await message.answer(f"–õ–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å: {persona}")
