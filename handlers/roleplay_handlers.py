from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from loguru import logger

from database.connection import db
from database.models import Conversation, User
from handlers.keyboards import get_back_keyboard, get_stop_keyboard
from services.openai_service import openai_service

router = Router()


class RoleplayStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä"""

    in_roleplay = State()


@router.callback_query(F.data.startswith("scenario_"))
async def start_roleplay_scenario(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–æ–ª–µ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    if callback.message is None:
        return
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if user is None:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=get_back_keyboard(),
        )
        await callback.answer()
        return

    if not user.consent_given:
        await callback.message.edit_text(
            "‚ö†Ô∏è –î–ª—è —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç 18+",
            reply_markup=get_back_keyboard(),
        )
        await callback.answer()
        return

    scenario_type = callback.data.split("_", 1)[1]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenario_start = await openai_service.generate_roleplay_scenario(
        scenario_type, user.gender, user.bot_gender
    )

    if scenario_start:
        await callback.message.edit_text(
            f"üé≠ <b>–†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n{scenario_start}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Å—Ç–∏–ª–µ <b>{user.communication_style.value}</b>!",
            reply_markup=get_stop_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(RoleplayStates.in_roleplay)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        conversation = Conversation(
            id=0,
            user_id=user_id,
            message="–ù–∞—á–∞–ª–æ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã",
            bot_response=scenario_start,
            communication_style=user.communication_style,
            tokens_used=len(scenario_start.split()),
            created_at=datetime.now(),
        )
        await db.save_conversation(conversation)
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard(),
        )

    await callback.answer()


@router.message(RoleplayStates.in_roleplay)
async def handle_roleplay_message(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if user is None:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        await state.clear()
        return

    if isinstance(message, Message) and message.text is None:
        await message.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    if user.stop_words:
        if isinstance(message, Message) and message.text is not None:
            message_lower = message.text.lower()
            for word in user.stop_words:
                if word.lower() in message_lower:
                    await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã
    bot_response = await openai_service.generate_response(
        message.text,
        user.communication_style,
        user.gender,
        user.bot_gender,
        user.stop_words,
    )

    if bot_response:
        await message.answer(bot_response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É
        conversation = Conversation(
            id=0,
            user_id=user_id,
            message=message.text,
            bot_response=bot_response,
            communication_style=user.communication_style,
            tokens_used=len(message.text.split()) + len(bot_response.split()),
            created_at=datetime.now(),
        )
        await db.save_conversation(conversation)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


@router.callback_query(RoleplayStates.in_roleplay, F.data == "stop_conversation")
async def stop_roleplay(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã"""
    if callback.message is None:
        return
    await callback.message.edit_text(
        "üõë –†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ "
        "'üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
        reply_markup=get_back_keyboard(),
    )
    await state.clear()
    await callback.answer()
