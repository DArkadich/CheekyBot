"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import hashlib
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

import redis
from loguru import logger

from config.settings import settings
from database.models import Conversation


class ContextManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(self) -> None:
        self.redis_client = redis.from_url(settings.redis_url)
        self.context_ttl = 3600  # 1 —á–∞—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.summary_ttl = 86400 * 7  # 7 –¥–Ω–µ–π –¥–ª—è —Å–≤–æ–¥–æ–∫

    def _get_context_key(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"context:{user_id}"

    def _get_summary_key(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return f"summary:{user_id}"

    def _get_session_key(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        return f"session:{user_id}"

    async def add_message_to_context(
        self, user_id: int, message: str, bot_response: str, communication_style: str
    ) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await self.get_context(user_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.append(
            {
                "role": "user",
                "content": message,
                "timestamp": datetime.now().isoformat(),
            }
        )
        context.append(
            {
                "role": "assistant",
                "content": bot_response,
                "timestamp": datetime.now().isoformat(),
            }
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(context) > 20:
            context = context[-20:]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        await self._save_context(user_id, context)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(context) % 10 == 0:
            await self._update_summary(user_id, context)

    async def get_context(
        self, user_id: int, max_messages: int = 10
    ) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
        context_key = self._get_context_key(user_id)
        cached_context = self.redis_client.get(context_key)

        if cached_context:
            context = json.loads(cached_context)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_messages
            return context[-max_messages * 2 :]  # *2 –ø–æ—Ç–æ–º—É —á—Ç–æ user + assistant

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return []

    async def get_optimized_context(
        self, user_id: int, max_tokens: int = 1000
    ) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤"""

        context = await self.get_context(user_id, max_messages=20)

        if not context:
            return []

        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–¥–∫—É
        total_tokens = sum(len(msg["content"].split()) for msg in context)

        if total_tokens > max_tokens:
            summary = await self.get_summary(user_id)
            if summary:
                return [{"role": "system", "content": summary}]
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                return context[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π

        return context

    async def get_summary(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        summary_key = self._get_summary_key(user_id)
        cached_summary = self.redis_client.get(summary_key)

        if cached_summary:
            return cached_summary.decode("utf-8")

        return None

    async def _save_context(self, user_id: int, context: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ Redis"""
        context_key = self._get_context_key(user_id)
        self.redis_client.setex(
            context_key, self.context_ttl, json.dumps(context, ensure_ascii=False)
        )

    async def _update_summary(self, user_id: int, context: List[Dict]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if len(context) < 10:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = context[-10:]
        summary = self._create_summary(recent_messages)

        if summary:
            summary_key = self._get_summary_key(user_id)
            self.redis_client.setex(summary_key, self.summary_ttl, summary)

    def _create_summary(self, messages: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not messages:
            return ""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        topics = []
        mood = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"

        for msg in messages:
            content = msg["content"].lower()

            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º
            if any(word in content for word in ["—Ä–∞–±–æ—Ç–∞", "–∫–∞—Ä—å–µ—Ä–∞", "–±–∏–∑–Ω–µ—Å"]):
                topics.append("—Ä–∞–±–æ—Ç–∞")
            elif any(word in content for word in ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "–ø–æ–µ–∑–¥–∫–∞", "–æ—Ç–ø—É—Å–∫"]):
                topics.append("–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
            elif any(word in content for word in ["–º—É–∑—ã–∫–∞", "—Ñ–∏–ª—å–º", "–∫–Ω–∏–≥–∞"]):
                topics.append("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
            elif any(word in content for word in ["—Å–ø–æ—Ä—Ç", "—Ñ–∏—Ç–Ω–µ—Å", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"]):
                topics.append("—Å–ø–æ—Ä—Ç")

            # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if any(word in content for word in ["üòä", "üòÑ", "—Ä–∞–¥–æ—Å—Ç—å", "–≤–µ—Å–µ–ª–æ"]):
                mood = "—Ä–∞–¥–æ—Å—Ç–Ω–æ–µ"
            elif any(word in content for word in ["üò¢", "–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å"]):
                mood = "–≥—Ä—É—Å—Ç–Ω–æ–µ"
            elif any(word in content for word in ["üòç", "–ª—é–±–æ–≤—å", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞"]):
                mood = "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ"

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        unique_topics = list(set(topics))[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 —Ç–µ–º—ã
        topics_str = ", ".join(unique_topics) if unique_topics else "–æ–±—â–∏–µ —Ç–µ–º—ã"

        return f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {topics_str}. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ."

    async def clear_context(self, user_id: int) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context_key = self._get_context_key(user_id)
        summary_key = self._get_summary_key(user_id)
        session_key = self._get_session_key(user_id)

        self.redis_client.delete(context_key, summary_key, session_key)

    async def get_user_preferences(self, user_id: int) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = await self.get_context(user_id, max_messages=50)

        preferences = {
            "topics": [],
            "communication_style": "neutral",
            "mood": "neutral",
        }

        if not context:
            return preferences

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        all_content = " ".join([msg["content"] for msg in context])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
        if any(word in all_content.lower() for word in ["—à—É—Ç–∫–∞", "–∏–≥—Ä–∞", "–≤–µ—Å–µ–ª–æ"]):
            preferences["communication_style"] = "playful"
        elif any(
            word in all_content.lower() for word in ["—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–ª—é–±–æ–≤—å", "–Ω–µ–∂–Ω–æ—Å—Ç—å"]
        ):
            preferences["communication_style"] = "romantic"
        elif any(
            word in all_content.lower() for word in ["—Å—Ç—Ä–∞—Å—Ç—å", "—ç–º–æ—Ü–∏–∏", "—á—É–≤—Å—Ç–≤–∞"]
        ):
            preferences["communication_style"] = "passionate"

        return preferences


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
context_manager = ContextManager()
